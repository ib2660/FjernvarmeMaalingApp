@page "/registrering-af-forbrug-alle-felter"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FjernvarmeMaalingApp.Models
@using FjernvarmeMaalingApp.Models.Interfaces
@using FjernvarmeMaalingApp.Services.Factories.Interfaces
@using FjernvarmeMaalingApp.ViewModels
@inject GemDataViewModel gemDataViewModel

<h2>Registrering af forbrug - Alle felter</h2>

<div>
    <label for="consumptionType">Forbrugstype:</label>
    <select id="consumptionType" @bind="gemDataViewModel.SelectedConsumptionTypeName">
        @foreach (var type in gemDataViewModel.BrugerOpsætningViewModel.ConsumptionTypeFactories)
        {
            var key = type.Key;
            <option value="@key">@key</option>
        }
    </select>
</div>
<div>
    <label for="registrationMethod">Registreringsmetode:</label>
    <select id="registrationMethod" @bind="gemDataViewModel.SelectedRegistrationStrategyName">
        @foreach (var strategy in gemDataViewModel.BrugerOpsætningViewModel.RegistrationStrategies)
        {
            var key = strategy.Key;
            <option value="@key">@key</option>
        }
    </select>
</div>
<div>
    <label for="selectedTimeFrame">Interval:</label>
    <select id="selectedTimeFrame" @bind="gemDataViewModel.selectedTimeFrame">
        <option value="Månedlig aflæsning">Månedlig aflæsning</option>
        <option value="Årlig aflæsning">Årlig aflæsning</option>
    </select>
</div>
<div>
    <label for="input">Indtast dato for måling:</label>
    <input id="input" type="date" @bind="gemDataViewModel.Measurement!.MeasurementDate" />
</div>
@gemDataViewModel.Measurement.RegistrationStrategy!.GetInputComponent(gemDataViewModel)


<button @onclick="UpdateAll">Opdater alle</button>

@code {
    protected override void OnInitialized()
    {
        if (gemDataViewModel.BrugerOpsætningViewModel.ConsumptionTypeFactories.Count == 0)
        {
            Console.WriteLine("No consumption type factories found");
        }
        if (gemDataViewModel.BrugerOpsætningViewModel.RegistrationStrategies.Count == 0)
        {
            Console.WriteLine("No registration strategies found");
        }
        else
        {
            gemDataViewModel.Measurement = new Measurement();
            gemDataViewModel.Measurement.SetRegistrationStrategy(gemDataViewModel.BrugerOpsætningViewModel.RegistrationStrategies.First().Value);
        }
    }

    private async Task UpdateAll()
    {
        await gemDataViewModel.ConsumptionTypeConfirmedAsync();
        gemDataViewModel.ConfirmRegistrationStrategy();
        gemDataViewModel.ConfirmTimeFrameStrategy();
        gemDataViewModel.ConfirmMeasurementDate();
        gemDataViewModel.SendMeasurementData();
    }
}
