@page "/registrering-af-forbrug-alle-felter"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using FjernvarmeMaalingApp.Models
@using FjernvarmeMaalingApp.Models.Interfaces
@using FjernvarmeMaalingApp.Services.Factories.Interfaces
@using FjernvarmeMaalingApp.ViewModels
@inject GemDataViewModel gemDataViewModel

<h2>Registrering af forbrug - Alle felter</h2>

<div>
    <label for="consumptionType">Forbrugstype:</label>
    <select id="consumptionType" @bind="gemDataViewModel.selectedConsumptionTypeName">
        @foreach (var consumptionTypeName in gemDataViewModel.GetConsumptionTypeNames())
        {
            <option value="@consumptionTypeName">@consumptionTypeName</option>
        }
    </select>
</div>
<div>
    <label for="registrationMethod">Registreringsmetode:</label>
    <select id="registrationMethod" @bind="gemDataViewModel.SelectedRegistrationStrategyName">
        @foreach (var registrationStrategyName in gemDataViewModel.GetRegistrationStrategyNames())
        {
            <option value="@registrationStrategyName">@registrationStrategyName</option>
        }
    </select>
</div>
<div>
    <label for="selectedTimeFrame">Interval:</label>
    <select id="selectedTimeFrame" @bind="gemDataViewModel.selectedTimeFrameName">
        @foreach (var timeFrameStrategyName in gemDataViewModel.GetTimeFrameStrategyNames())
        {
            <option value="@timeFrameStrategyName">@timeFrameStrategyName</option>
        }
    </select>
</div>
<div>
    <label for="input">Indtast dato for måling:</label>
    <input id="input" type="date" @bind="gemDataViewModel.Measurement!.MeasurementDate" />
</div>
@if (gemDataViewModel.SelectedRegistrationStrategyName != string.Empty)
{
    @registrationStrategyComponent
}
<button @onclick="SaveData">Gem målingen</button>


@code {
    private RenderFragment? registrationStrategyComponent;

    protected override async Task OnInitializedAsync()
    {
        gemDataViewModel.OnStateChange += VisComponent;
    }

    public void VisComponent()
    {
        var strategy = gemDataViewModel.GetRegistrationStrategy(gemDataViewModel.SelectedRegistrationStrategyName);
        registrationStrategyComponent = strategy?.GetInputComponent();
        StateHasChanged();
    }
    private async Task SaveData()
    {
        await gemDataViewModel.SubmitMeasurementData();
    }
}
